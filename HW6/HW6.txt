
-- урок 5
-- задача 1
UPDATE users SET created_at = NOW();

UPDATE users SET updated_at = NOW();
-- задача 2
ALTER TABLE users CHANGE COLUMN created_at created_at datetime default current_timestamp;

ALTER TABLE users CHANGE COLUMN updated_at updated_at datetime default current_timestamp;
-- задача 3
CREATE TABLE store_new_TBD (
id int UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT "ИДЕНТИФИКАТОР СТРОКИ",
name VARCHAR(150) NOT NULL UNIQUE COMMENT "название изделия",
qtty INT COMMENT "количество на складе"
) COMMENT "dummy table for HW";

DESC store_new_TBD;

INSERT INTO store_new_TBD (name, qtty) VALUES
('good 1', '1'),
('good 2', '0'),
('good 3', '140'),
('good 4', '45'),
('good 5', '0'),
('good 6', '7');

SELECT name, qtty FROM store_new_TBD ORDER BY CASE WHEN qtty = 0 THEN 1 ELSE 0 END, qtty;

-- задача 5
SELECT * FROM store_new_TBD WHERE id IN (5,1,2) ORDER BY FIELD(id, 5, 1,2);

-- задача 4
DESC profiles ;

SELECT user_id, birthday, CASE WHEN date_format(birthday, '%m') = 05 THEN 'may'
	WHEN date_format(birthday, '%m') = 08 THEN 'august'
	END AS MONTH FROM profiles WHERE DATE_FORMAT(birthday, '%m') = 05 OR DATE_FORMAT(birthday, '%m')  = 08;

-- задача 2-1
SELECT ROUND(AVG(TO_DAYS(NOW() ) - TO_DAYS(birthday) )/ 365.25, 0) AS age_aver FROM profiles;

-- задача 2-2
SELECT DATE_FORMAT(DATE(CONCAT_WS('-', YEAR (NOW() ), MONTH (birthday), DAY(birthday))), '%W') AS day, COUNT(*) AS total
FROM profiles GROUP BY day ORDER BY total DESC;

-- задача 2-3
SELECT ROUND(EXP(SUM(LN(qtty)))) as mult FROM store_new_TBD;

-- Урок 6

-- Таблица лайков
DROP TABLE IF EXISTS likes;
CREATE TABLE likes (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
  user_id INT UNSIGNED NOT NULL,
  target_id INT UNSIGNED NOT NULL,
  target_type_id INT UNSIGNED NOT NULL,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Таблица типов лайков
DROP TABLE IF EXISTS target_types;
CREATE TABLE target_types (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(255) NOT NULL UNIQUE,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

INSERT INTO target_types (name) VALUES 
  ('messages'),
  ('users'),
  ('media'),
  ('posts');

-- Заполняем лайки
INSERT INTO likes 
  SELECT 
    id, 
    FLOOR(1 + (RAND() * 100)), 
    FLOOR(1 + (RAND() * 100)),
    FLOOR(1 + (RAND() * 4)),
    CURRENT_TIMESTAMP 
  FROM messages;

-- Проверим
SELECT * FROM likes LIMIT 10;

-- Создадим таблицу постов
CREATE TABLE posts (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
  user_id INT UNSIGNED NOT NULL,
  community_id INT UNSIGNED,
  head VARCHAR(255),
  body TEXT NOT NULL,
  media_id INT UNSIGNED,
  is_public BOOLEAN DEFAULT TRUE,
  is_archived BOOLEAN DEFAULT FALSE,
  views_counter INT UNSIGNED DEFAULT 0,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Задание 1

-- Добавляем внешние ключи в БД vk
-- Для таблицы профилей

-- Смотрим структуру таблицы
DESC profiles;

-- Добавляем внешние ключи
ALTER TABLE profiles
  ADD CONSTRAINT profiles_user_id_fk 
    FOREIGN KEY (user_id) REFERENCES users(id)
      ON DELETE CASCADE,
  ADD CONSTRAINT profiles_photo_id_fk
    FOREIGN KEY (photo_id) REFERENCES media(id)
      ON DELETE SET NULL;

-- Изменяем тип столбца при необходимости
ALTER TABLE profiles MODIFY COLUMN photo_id INT(10) UNSIGNED;

-- Для таблицы сообщений

-- Смотрим структурв таблицы
DESC messages;

-- Добавляем внешние ключи
ALTER TABLE messages
  ADD CONSTRAINT messages_from_user_id_fk 
    FOREIGN KEY (from_user_id) REFERENCES users(id),
  ADD CONSTRAINT messages_to_user_id_fk 
    FOREIGN KEY (to_user_id) REFERENCES users(id);
   
   -- Для communities_users
   
   -- Смотрим структуру таблицы
DESC communities_users ;

-- Добавляем внешние ключи
ALTER TABLE communities_users 
  ADD CONSTRAINT communities_users_user_id_fk 
    FOREIGN KEY (user_id) REFERENCES users(id)
    ON DELETE CASCADE;
   
ALTER TABLE communities_users 
  ADD CONSTRAINT communities_users_community_id_fk 
    FOREIGN KEY (community_id) REFERENCES communities(id);
   
   -- Для friendship
   
   -- Смотрим структуру таблицы
DESC friendship ;

-- Добавляем внешние ключи
ALTER TABLE friendship 
  ADD CONSTRAINT friendship_user_id_fk 
    FOREIGN KEY (user_id) REFERENCES users(id),
  ADD CONSTRAINT friendship_friend_id_fk 
    FOREIGN KEY (friend_id) REFERENCES users(id);
   
ALTER TABLE friendship 
  ADD CONSTRAINT friendship_status_id_fk 
    FOREIGN KEY (status_id) REFERENCES friendship_statuses(id);
   
-- Для likes
   
   -- Смотрим структуру таблицы
DESC likes ;

-- Добавляем внешние ключи
ALTER TABLE likes 
  ADD CONSTRAINT likes_user_id_fk 
    FOREIGN KEY (user_id) REFERENCES users(id),
  ADD CONSTRAINT likes_target_type_id_fk 
    FOREIGN KEY (target_type_id) REFERENCES target_types(id);
   
-- Для media
   
   -- Смотрим структуру таблицы
DESC media;

-- Добавляем внешние ключи
ALTER TABLE media 
  ADD CONSTRAINT media_user_id_fk 
    FOREIGN KEY (user_id) REFERENCES users(id);
ALTER TABLE media    
  ADD CONSTRAINT media_media_type_id_fk 
    FOREIGN KEY (media_type_id) REFERENCES media_types(id);

-- Для posts
   
   -- Смотрим структуру таблицы
DESC posts;

-- Добавляем внешние ключи
ALTER TABLE posts 
  ADD CONSTRAINT posts_user_id_fk 
    FOREIGN KEY (user_id) REFERENCES users(id),
  ADD CONSTRAINT posts_media_id_fk 
    FOREIGN KEY (media_id) REFERENCES media(id),
  ADD CONSTRAINT posts_community_id_fk 
    FOREIGN KEY (community_id) REFERENCES communities(id);

   -- задача 2 - сделана выше, добавлены таблицы
   -- задача 3
 
SELECT COUNT(*) id, 'Male' as gend from likes where user_id IN (
	SELECT user_id from profiles where gender = 'm') 
	UNION 
SELECT COUNT(*) id, 'Female' as gend from likes where user_id IN (
	SELECT user_id from profiles where gender = 'f') ;

-- задача 4
  
WITH tbl1 AS (SELECT user_id FROM profiles ORDER BY birthday DESC LIMIT 10) 
SELECT COUNT(*) id from likes WHERE user_id IN (SELECT * from tbl1);

-- задача 5

SELECT id, first_name from users where 
	-- id IN (SELECT user_id from profiles where photo_id = '' ) and  
	id not in (select user_id from media) and
	id not in (select from_user_id from messages union select to_user_id from messages) and
	id not in (select user_id from likes) 
limit 10;